

    def create_set():
        This function simply creates and returns an empty set using set(). This is the basic way to create a new set in Python.

    def add_to_set(s, element):
        This function takes a set s and an element as input.
        s.add(element): This is the standard way to add an element to a set. If the element is already in the set, nothing happens.

    def remove_from_set(s, element):
        This function takes a set s and an element as input, intending to remove the element.
        if element in s:: This checks if the element is actually present in the set s.
        s.remove(element): If the element is found, this line removes it from the set.
        else:: If the element is not found in the set.
        print(f"{element} not found in the set."): A message is printed to the user indicating that the element couldn't be removed because it wasn't there.

    def contains_in_set(s, element):
        This function checks if a given element is present in a set s.
        return element in s: This is a very Pythonic way to check for membership in a set. It returns True if the element is in the set, and False otherwise.

    def size_of_set(s):
        This function returns the number of elements in a set s.
        return len(s): The len() function in Python works on sets (and other collections) to give you the number of items they contain.

    def iterator_of_set(s):
        This function demonstrates how to get an iterator for a set.
        return iter(s): An iterator allows you to loop through the elements of a set one by one. While you can directly loop through a set (for item in my_set:), sometimes you might need an explicit iterator for more control. Note: This function is defined but not used in the example usage part of the code.

    def intersection_of_sets(set1, set2):
        This function calculates the intersection of two sets. The intersection contains only the elements that are present in both set1 and set2.
        return set1.intersection(set2): This uses the built-in .intersection() method of sets.

    def union_of_sets(set1, set2):
        This function calculates the union of two sets. The union contains all the unique elements from both set1 and set2.
        return set1.union(set2): This uses the built-in .union() method of sets.

    def difference_of_sets(set1, set2):
        This function calculates the difference between two sets. The difference set1.difference(set2) contains the elements that are in set1 but not in set2.
        return set1.difference(set2): This uses the built-in .difference() method of sets.

    def is_subset(set1, set2):
        This function checks if set1 is a subset of set2. set1 is a subset of set2 if every element in set1 is also present in set2.
        return set1.issubset(set2): This uses the built-in .issubset() method of sets.

    def get_user_input_for_set():
        This is a helper function to make it easier to get set elements from the user.
        input_set = create_set(): Creates an empty set.
        num_elements = int(input("Enter the number of elements in the set: ")): Asks the user how many elements they want to enter.
        for i in range(num_elements):: Loops that many times.
        element = int(input(f"Enter element {i + 1}: ")): Prompts the user to enter each element and converts it to an integer.
        add_to_set(input_set, element): Adds the entered element to the input_set.
        return input_set: Returns the set populated with user input.

    Example Usage (Lines starting with # Example usage: and below):
        This part of the code demonstrates how to use the functions defined above.
        It prompts the user to enter elements for two sets (set1 and set2).
        It then performs and prints the results of various set operations: intersection, union, difference, and subset check.
        It shows how to add and remove elements from a set.
        It shows how to check if an element is in a set.
        It shows how to get the size of a set.
        Finally, it prints the contents of set1 and set2 after the modifications.

Key Takeaways for Your Practical Exam:

    Sets are for unique, unordered collections.
    Key set operations:
        Adding elements (add())
        Removing elements (remove())
        Checking for membership (in)
        Finding the size (len())
        Intersection (intersection())
        Union (union())
        Difference (difference())
        Subset check (issubset())
