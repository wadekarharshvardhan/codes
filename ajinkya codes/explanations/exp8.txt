Okay, let's dive into the detailed explanation of this C++ code which implements the dynamic programming approach to construct an Optimal Binary Search Tree (OBST).

**Program Goal:**

The program takes a set of keys (representing successful searches) and a set of dummy keys (representing unsuccessful searches) along with their respective probabilities. It then calculates the minimum possible cost of a Binary Search Tree (BST) containing these keys and outputs the structure of that optimal BST. The cost of a BST is defined as the sum of the probability of accessing each node multiplied by its depth (plus 1 for the root being at depth 0).

**Key Concepts:**

*   **Binary Search Tree (BST):** A tree data structure where for each node, all values in the left subtree are less than the node's value, and all values in the right subtree are greater than the node's value.
*   **Optimal Binary Search Tree (OBST):** A BST for a given set of keys and their access probabilities (both successful and unsuccessful searches) that has the minimum expected search cost.
*   **Successful Search:** Searching for a key that is present in the tree. The cost is the depth of the node containing the key + 1.
*   **Unsuccessful Search:** Searching for a key that is not present in the tree. These searches end up in one of the "dummy nodes" or "external nodes" which represent the gaps between the keys and before/after the smallest/largest keys. The cost is the depth of the dummy node + 1.
*   **Dynamic Programming:** An algorithmic technique that solves complex problems by breaking them down into simpler overlapping subproblems and storing the results of these subproblems to avoid recomputing them.
*   **Subproblem:** The problem of finding the OBST for a contiguous subset of keys.
*   **Principle of Optimality:** The optimal solution to a problem contains optimal solutions to its subproblems. In OBST, the optimal BST for a range of keys \[i, j] has an optimal root `k` within that range, and its left and right subtrees are themselves optimal BSTs for their respective key ranges.

**Detailed Code Breakdown:**

1.  **Include Directive:**

    ```c++
    #include<iostream>
    using namespace std;
    ```
    *   `#include<iostream>`: Provides standard input/output functionalities like `cin` and `cout`.
    *   `using namespace std;`: Brings the standard namespace into scope.

2.  **Function Declarations:**

    ```c++
    void con_obst(void);
    void print(int,int);
    ```
    *   `void con_obst(void);`: Declares the function that will compute the optimal BST cost and structure using dynamic programming.
    *   `void print(int,int);`: Declares the function that will print the structure of the constructed optimal BST.

3.  **Global Variables:**

    ```c++
    float a[20],b[20],wt[20][20],c[20][20];
    int r[20][20],n;
    ```
    *   `float a[20]`: Array to store the probabilities of **successful** searches. `a[i]` will store the probability of searching for key `i`. The keys are assumed to be sorted and numbered from 1 to `n`.
    *   `float b[20]`: Array to store the probabilities of **unsuccessful** searches. `b[i]` will store the probability of a search ending up in the "gap" between key `i` and key `i+1`. `b[0]` represents the gap before the first key, and `b[n]` represents the gap after the last key.
    *   `float wt[20][20]`: A 2D array to store the **weight** of the subtree rooted at a node representing the range of keys from index `i` to `j`. The weight of a subtree is the sum of the probabilities of all keys (`a`) and dummy keys (`b`) within that range. `wt[i][j]` stores the sum of `b[i] + a[i+1] + ... + a[j] + b[j]`.
    *   `float c[20][20]`: A 2D array to store the **minimum cost** of the optimal BST for the range of keys from index `i` to `j`. `c[i][j]` stores the minimum cost for the subtree containing keys `i+1` to `j` and dummy keys `i` to `j`.
    *   `int r[20][20]`: A 2D array to store the **root** of the optimal BST for the range of keys from index `i` to `j`. `r[i][j]` stores the index of the key that is the root of the optimal subtree for keys `i+1` to `j`.
    *   `int n`: An integer to store the number of keys (successful search probabilities).

    **Note:** The arrays are declared with a fixed size of 20, limiting the number of keys to 19 (since array indices go up to 19). This is a limitation. A more robust solution would use dynamic allocation or `std::vector`.

4.  **`main()` Function:**

    ```c++
    int main()
      {
        int i;
        cout<<"\n****** PROGRAM FOR OBST ******\n";
        cout<<"\nEnter the no. of nodes : ";
        cin>>n; // Read the number of keys (successful searches)
        cout<<"\nEnter the probability for successful search :: ";
        cout<<"\n---------------------------\n";
        for(i=1;i<=n;i++) // Read probabilities for successful searches (keys 1 to n)
          {
            cout<<"p["<<i<<"]";
            cin>>a[i];
          }
        cout<<"\nEnter the probability for unsuccessful search :: ";
        cout<<"\n----------------------------\n";
        for(i=0;i<=n;i++) // Read probabilities for unsuccessful searches (dummy keys 0 to n)
          {
            cout<<"q["<<i<<"]";
            cin>>b[i];
          }
        con_obst(); // Call the function to compute the OBST
        cout<<"\n\nOptimal BST Structure (Root and Children):"; // Added a header for clarity
        print(0,n); // Call the function to print the OBST structure
        cout<<endl;
        return 0; // Indicate successful execution
    }
    ```
    *   This is the entry point of the program.
    *   It prompts the user to enter the number of keys (`n`).
    *   It then reads the probabilities for successful searches (`a[1]` to `a[n]`). Note that the array `a` is indexed from 1 to `n` for convenience, aligning with key numbering.
    *   It reads the probabilities for unsuccessful searches (`b[0]` to `b[n]`). `b[0]` is for searches less than the first key, `b[i]` is for searches between key `i` and key `i+1`, and `b[n]` is for searches greater than the last key.
    *   It calls the `con_obst()` function to perform the dynamic programming calculation.
    *   It calls the `print(0, n)` function to display the structure of the optimal BST.
    *   Returns 0.

5.  **`con_obst(void)` Function:**

    ```c++
    void con_obst(void)
    {
        int i,j,k,l,min; // Declared variables for loops and minimum value (though 'min' is not used)
        for(i=0;i<n;i++)
          { // Initialisation for chains of length 0 and 1
            // For chains of length 0 (single dummy node)
            c[i][i]=0.0; // Cost is 0 for an empty tree
            r[i][i]=0; // No root
            wt[i][i]=b[i]; // Weight is just the probability of the dummy node

            // For chains of length 1 (one key and two dummy nodes)
            // This corresponds to the range of keys from index i+1 to i+1 (a single key)
            // and dummy keys i and i+1.
            wt[i][i+1]=b[i]+b[i+1]+a[i+1]; // Weight = b[i] + a[i+1] + b[i+1]
            c[i][i+1]=b[i]+b[i+1]+a[i+1]; // Cost = Weight * (depth + 1). For a single node, depth is 0, so cost = weight * 1.
            r[i][i+1]=i+1; // The root is the key i+1
          }
        // Special case for the last dummy node chain of length 0
        c[n][n]=0.0;
        r[n][n]=0;
        wt[n][n]=b[n];

        // Main loops for calculating OBST for chains of length 2 to n
        // 'i' represents the length of the chain (number of keys + 1 dummy nodes)
        for(i=2;i<=n;i++)
          {
            // 'j' represents the starting index of the dummy node before the first key in the chain
            for(j=0;j<=n-i;j++)
              {
                // k represents the ending index of the dummy node after the last key in the chain (j+i)
                // Calculate the weight of the current chain (keys from j+1 to j+i, dummy nodes j to j+i)
                // The weight of the current chain is the weight of the previous shorter chain (j to j+i-1)
                // plus the probability of the new key a[j+i] and the new dummy node b[j+i].
                wt[j][j+i]=b[j+i]+a[j+i]+wt[j][j+i-1];

                // Initialize the minimum cost for this chain to a very large value
                c[j][j+i]=9999;

                // Iterate through all possible roots 'l' for the current chain
                // The possible roots are the keys from index j+1 to j+i
                for(l=j+1;l<=j+i;l++)
                  {
                    // Calculate the cost if key 'l' is the root of the subtree for keys j+1 to j+i
                    // The cost is the sum of the optimal costs of the left subtree (keys j+1 to l-1, dummy nodes j to l-1)
                    // and the right subtree (keys l+1 to j+i, dummy nodes l to j+i).
                    // The indices for the subproblems are:
                    // Left subtree: keys j+1 to l-1, dummy nodes j to l-1 -> c[j][l-1]
                    // Right subtree: keys l+1 to j+i, dummy nodes l to j+i -> c[l][j+i]
                    if(c[j][j+i]>(c[j][l-1]+c[l][j+i]))
                      {
                        // If the current root 'l' gives a lower cost than the current minimum
                        c[j][j+i]=c[j][l-1]+c[l][j+i]; // Update the minimum cost
                        r[j][j+i]=l; // Store 'l' as the optimal root for this chain
                      }
                  }
                // Add the weight of the current chain to the minimum cost.
                // This accounts for the cost of accessing the root and all nodes in its subtree.
                // The cost formula for a subtree rooted at k with keys i+1 to j is:
                // Cost(i, j) = min_{k=i+1 to j} (Cost(i, k-1) + Cost(k, j)) + Weight(i, j)
                // Weight(i, j) = sum of probabilities of keys i+1 to j and dummy keys i to j.
                c[j][j+i]+=wt[j][j+i];
              }
            //cout<<endl; // This line seems to be for debugging or visual separation during computation, not essential for the final output.
          }

        // Output the results for the entire tree (keys 1 to n, dummy keys 0 to n)
        cout<<"\n\nOptimal BST is :: ";
        cout<<"\nw[0]["<<n<<"] :: "<<wt[0][n]; // Total weight of the tree
        cout<<"\nc[0]["<<n<<"] :: "<<c[0][n]; // Minimum cost of the optimal BST
        cout<<"\nr[0]["<<n<<"] :: "<<r[0][n]; // Root of the optimal BST
      }
    ```
    *   This function implements the core dynamic programming logic.
    *   It uses nested loops to calculate the optimal cost and root for increasing lengths of key chains.
    *   **Initialization (Length 0 and 1):** The first loop initializes the `c`, `r`, and `wt` arrays for chains of length 0 (single dummy nodes) and length 1 (one key and two surrounding dummy nodes).
        *   `c[i][i] = 0.0; r[i][i] = 0; wt[i][i] = b[i];`: An empty subtree (represented by a single dummy node `b[i]`) has a cost of 0, no root, and its weight is just the probability of the dummy node.
        *   `wt[i][i+1] = b[i] + b[i+1] + a[i+1];`: A chain of length 1 consists of key `a[i+1]` and dummy nodes `b[i]` and `b[i+1]`. Its weight is the sum of their probabilities.
        *   `c[i][i+1] = b[i] + b[i+1] + a[i+1];`: The cost of the optimal BST for this single key is simply its weight, as it will be the root at depth 0.
        *   `r[i][i+1] = i+1;`: The root of this simple subtree is the key `i+1`.
    *   **Main DP Loops (Length 2 to n):** The outer loop (`for(i=2; i<=n; i++)`) iterates through the length of the key chains (from 2 up to `n`). The inner loop (`for(j=0; j<=n-i; j++)`) iterates through the starting index `j` of the dummy node before the first key in the current chain. The chain covers keys from index `j+1` to `j+i`.
    *   **Weight Calculation:** `wt[j][j+i] = b[j+i] + a[j+i] + wt[j][j+i-1];`: Calculates the weight of the current chain by adding the probability of the new key `a[j+i]` and the new dummy node `b[j+i]` to the weight of the previous shorter chain (`wt[j][j+i-1]`).
    *   **Cost and Root Calculation:**
        *   `c[j][j+i] = 9999;`: Initializes the minimum cost for the current chain to a very large value.
        *   `for(l=j+1; l<=j+i; l++)`: This loop iterates through all possible keys `l` (from `j+1` to `j+i`) that could be the root of the optimal subtree for this chain.
        *   `if(c[j][j+i] > (c[j][l-1] + c[l][j+i]))`: This is the core of the dynamic programming recurrence. It checks if setting key `l` as the root gives a lower cost than the current minimum cost found so far for this chain.
            *   `c[j][l-1]`: The optimal cost of the left subtree, which contains keys from `j+1` to `l-1` and dummy nodes `j` to `l-1`.
            *   `c[l][j+i]`: The optimal cost of the right subtree, which contains keys from `l+1` to `j+i` and dummy nodes `l` to `j+i`.
        *   If a lower cost is found:
            *   `c[j][j+i] = c[j][l-1] + c[l][j+i];`: Updates the minimum cost for the chain.
            *   `r[j][j+i] = l;`: Stores the current root `l` as the optimal root for this chain.
        *   `c[j][j+i] += wt[j][j+i];`: After finding the best split point (optimal root `l`), the total cost for the chain `[j, j+i]` is the sum of the optimal costs of its left and right subtrees PLUS the total weight of the current chain. This addition accounts for the cost increase due to all nodes in the subtree being one level deeper relative to the root of this subtree.
    *   **Final Output:** After the loops complete, `c[0][n]`, `wt[0][n]`, and `r[0][n]` hold the optimal cost, total weight, and root of the entire OBST containing all `n` keys and `n+1` dummy nodes. These are printed.

6.  **`print(int l1, int r1)` Function:**

    ```c++
    void print(int l1,int r1)
      {
        // Base case: If the range is empty (left index >= right index), return.
        // This happens for dummy nodes or when a leaf node is reached.
        if(l1>=r1)
            return;

        // Print the left child of the current root
        // The root of the subtree for the range [l1, r1] is given by r[l1][r1].
        // The left subtree covers the range [l1, r[l1][r1]-1].
        // The root of this left subtree is r[l1][r[l1][r1]-1].
        // We only print if the root of the left subtree is not 0 (meaning it's a key node).
        if(r[l1][r[l1][r1]-1]!=0)
            cout<<"\n Left child of "<<r[l1][r1]<<" :: "<<r[l1][r[l1][r1]-1];

        // Print the right child of the current root
        // The root of the right subtree covers the range [r[l1][r1], r1].
        // The root of this right subtree is r[r[l1][r1]][r1].
        // We only print if the root of the right subtree is not 0 (meaning it's a key node).
        if(r[r[l1][r1]][r1]!=0)
            cout<<"\n Right child of "<<r[l1][r1]<<" :: "<<r[r[l1][r1]][r1];

        // Recursively call print for the left and right subtrees
        print(l1,r[l1][r1]-1); // Left subtree
        print(r[l1][r1],r1);   // Right subtree

        return; // Redundant return, but harmless
    }
    ```
    *   This function recursively prints the structure of the optimal BST using the `r` array (which stores the roots of the optimal subtrees).
    *   `l1`: The starting index of the dummy node before the first key in the current subtree's range.
    *   `r1`: The ending index of the dummy node after the last key in the current subtree's range.
    *   `if(l1>=r1) return;`: This is the base case for the recursion. If the left index is greater than or equal to the right index, it means the range is empty (representing a dummy node or the end of a branch), so the function returns.
    *   `r[l1][r1]`: This gives the index of the key that is the root of the optimal subtree for the range of keys from `l1+1` to `r1`.
    *   `r[l1][r[l1][r1]-1]`: This finds the root of the left subtree. The left subtree covers the range of keys from `l1+1` up to `r[l1][r1]-1`, corresponding to the `c` and `r` indices `[l1][r[l1][r1]-1]`.
    *   `r[r[l1][r1]][r1]`: This finds the root of the right subtree. The right subtree covers the range of keys from `r[l1][r1]+1` up to `r1`, corresponding to the `c` and `r` indices `[r[l1][r1]][r1]`.
    *   The `if( ... != 0)` checks ensure that we only print the child if it's a key node (a root of a non-empty subtree). Dummy nodes have a root value of 0 in the `r` array.
    *   The function then makes two recursive calls: one for the left subtree and one for the right subtree, to print their structures.

**How the Dynamic Programming Works (Conceptual):**

The code calculates the OBST bottom-up:

1.  **Chains of Length 0:** The cost of an empty tree (representing a dummy node) is 0. The weight is the probability of that dummy node.
2.  **Chains of Length 1:** The cost of a tree with one key `k` and its two dummy nodes `b[k-1]` and `b[k]` is the sum of their probabilities. The key `k` is the root.
3.  **Chains of Length 2, 3, ..., n:** For a chain of length `i` (keys `j+1` to `j+i`), the algorithm considers every key `l` within that range (`j+1` to `j+i`) as a potential root. If `l` is the root, the left subtree is the OBST for keys `j+1` to `l-1` (with dummy nodes `j` to `l-1`), and the right subtree is the OBST for keys `l+1` to `j+i` (with dummy nodes `l` to `j+i`).
    *   The cost if `l` is the root is the sum of the optimal costs of the left and right subtrees *plus* the total weight of the current chain. The weight is added because every node in the current chain (including the root) is one level deeper in the final tree if `l` is the root of this subtree segment.
    *   The algorithm finds the root `l` that minimizes this cost.
4.  **Storing Results:** The minimum cost (`c[j][j+i]`) and the corresponding optimal root (`r[j][j+i]`) are stored in the tables.
5.  **Building Up:** By calculating the optimal costs and roots for smaller chains first, the algorithm can efficiently use these stored results to calculate the optimal solutions for larger chains.

**Limitations:**

*   **Fixed Array Size:** As mentioned, the fixed size of 20 for the arrays limits the number of keys the program can handle.
*   **No Input Validation:** The code doesn't check if the number of nodes is within the array bounds or if the probabilities are valid (e.g., non-negative, sum to 1).
*   **Output Format:** The `print` function only shows the child-parent relationships. A more visual tree representation would be more helpful for understanding the structure.

This detailed explanation covers the purpose of the code, the underlying concepts, and a breakdown of each function and variable. It should be helpful for understanding how the dynamic programming approach is applied to solve the Optimal Binary Search Tree problem.