#include <iostream>
#include <map>
#include <string>
using namespace std;

struct Node {
    string key, meaning;
    Node* left;
    Node* right;
    int height;
    Node(string k, string m) : key(k), meaning(m), left(nullptr), right(nullptr), height(1) {}
};

int height(Node* N) { return N ? N->height : 0; }

int max(int a, int b) { return (a > b) ? a : b; }

Node* rotateRight(Node* y) {
    Node* x = y->left;
    Node* T2 = x->right;
    x->right = y;
    y->left = T2;
    y->height = max(height(y->left), height(y->right)) + 1;
    x->height = max(height(x->left), height(x->right)) + 1;
    return x;
}

Node* rotateLeft(Node* x) {
    Node* y = x->right;
    Node* T2 = y->left;
    y->left = x;
    x->right = T2;
    x->height = max(height(x->left), height(x->right)) + 1;
    y->height = max(height(y->left), height(y->right)) + 1;
    return y;
}

int getBalance(Node* N) { return N ? height(N->left) - height(N->right) : 0; }

Node* insert(Node* node, string key, string meaning) {
    if (!node) return new Node(key, meaning);
    if (key < node->key) node->left = insert(node->left, key, meaning);
    else if (key > node->key) node->right = insert(node->right, key, meaning);
    else return node;
    node->height = 1 + max(height(node->left), height(node->right));
    int balance = getBalance(node);
    if (balance > 1 && key < node->left->key) return rotateRight(node);
    if (balance < -1 && key > node->right->key) return rotateLeft(node);
    if (balance > 1 && key > node->left->key) {
        node->left = rotateLeft(node->left);
        return rotateRight(node);
    }
    if (balance < -1 && key < node->right->key) {
        node->right = rotateRight(node->right);
        return rotateLeft(node);
    }
    return node;
}

Node* minValueNode(Node* node) {
    Node* current = node;
    while (current->left) current = current->left;
    return current;
}

Node* deleteNode(Node* root, string key) {
    if (!root) return root;
    if (key < root->key) root->left = deleteNode(root->left, key);
    else if (key > root->key) root->right = deleteNode(root->right, key);
    else {
        if (!root->left || !root->right) {
            Node* temp = root->left ? root->left : root->right;
            if (!temp) {
                temp = root;
                root = nullptr;
            } else *root = *temp;
            delete temp;
        } else {
            Node* temp = minValueNode(root->right);
            root->key = temp->key;
            root->meaning = temp->meaning;
            root->right = deleteNode(root->right, temp->key);
        }
    }
    if (!root) return root;
    root->height = 1 + max(height(root->left), height(root->right));
    int balance = getBalance(root);
    if (balance > 1 && getBalance(root->left) >= 0) return rotateRight(root);
    if (balance > 1 && getBalance(root->left) < 0) {
        root->left = rotateLeft(root->left);
        return rotateRight(root);
    }
    if (balance < -1 && getBalance(root->right) <= 0) return rotateLeft(root);
    if (balance < -1 && getBalance(root->right) > 0) {
        root->right = rotateRight(root->right);
        return rotateLeft(root);
    }
    return root;
}

void inorder(Node* root) {
    if (root) {
        inorder(root->left);
        cout << root->key << ": " << root->meaning << endl;
        inorder(root->right);
    }
}

int maxComparisons(Node* root) {
    return height(root);
}

int main() {
    Node* root = nullptr;
    int n;
    cout << "Enter number of words: ";
    cin >> n;
    while (n--) {
        string key, meaning;
        cout << "Enter keyword: ";
        cin >> key;
        cout << "Enter meaning: ";
        cin >> meaning;
        root = insert(root, key, meaning);
    }
    cout << "Dictionary (Inorder):" << endl;
    inorder(root);
    string keyToDelete;
    cout << "Enter keyword to delete: ";
    cin >> keyToDelete;
    root = deleteNode(root, keyToDelete);
    cout << "Updated Dictionary (Inorder):" << endl;
    inorder(root);
    cout << "Max comparisons required: " << maxComparisons(root) << endl;
}
